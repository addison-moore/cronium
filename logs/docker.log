cronium-app-dev     | Error in getEventWithRelations for event 550: Error: Failed query: select "events"."id", "events"."user_id", "events"."name", "events"."description", "events"."shared", "events"."type", "events"."content", "events"."http_method", "events"."http_url", "events"."http_headers", "events"."http_body", "events"."tool_action_config", "events"."status", "events"."trigger_type", "events"."schedule_number", "events"."schedule_unit", "events"."custom_schedule", "events"."run_location", "events"."server_id", "events"."timeout_value", "events"."timeout_unit", "events"."retries", "events"."start_time", "events"."execution_count", "events"."max_executions", "events"."reset_counter_on_active", "events"."last_run_at", "events"."next_run_at", "events"."success_count", "events"."failure_count", "events"."tags", "events"."created_at", "events"."updated_at", "events_envVars"."data" as "envVars", "events_server"."data" as "server", "events_eventServers"."data" as "eventServers", "events_onSuccessEvents"."data" as "onSuccessEvents", "events_onFailEvents"."data" as "onFailEvents", "events_onAlwaysEvents"."data" as "onAlwaysEvents" from "events" "events" left join lateral (select coalesce(json_agg(json_build_array("events_envVars"."id", "events_envVars"."event_id", "events_envVars"."key", "events_envVars"."value", "events_envVars"."created_at", "events_envVars"."updated_at")), '[]'::json) as "data" from "env_vars" "events_envVars" where "events_envVars"."event_id" = "events"."id") "events_envVars" on true left join lateral (select json_build_array("events_server"."id", "events_server"."user_id", "events_server"."name", "events_server"."address", "events_server"."ssh_key", "events_server"."username", "events_server"."port", "events_server"."shared", "events_server"."online", "events_server"."last_checked", "events_server"."created_at", "events_server"."updated_at") as "data" from (select * from "servers" "events_server" where "events_server"."id" = "events"."server_id" limit $1) "events_server") "events_server" on true left join lateral (select coalesce(json_agg(json_build_array("events_eventServers"."id", "events_eventServers"."event_id", "events_eventServers"."server_id", "events_eventServers"."created_at", "events_eventServers_server"."data")), '[]'::json) as "data" from "event_servers" "events_eventServers" left join lateral (select json_build_array("events_eventServers_server"."id", "events_eventServers_server"."user_id", "events_eventServers_server"."name", "events_eventServers_server"."address", "events_eventServers_server"."ssh_key", "events_eventServers_server"."username", "events_eventServers_server"."port", "events_eventServers_server"."shared", "events_eventServers_server"."online", "events_eventServers_server"."last_checked", "events_eventServers_server"."created_at", "events_eventServers_server"."updated_at") as "data" from (select * from "servers" "events_eventServers_server" where "events_eventServers_server"."id" = "events_eventServers"."server_id" limit $2) "events_eventServers_server") "events_eventServers_server" on true where "events_eventServers"."event_id" = "events"."id") "events_eventServers" on true left join lateral (select coalesce(json_agg(json_build_array("events_onSuccessEvents"."id", "events_onSuccessEvents"."type", "events_onSuccessEvents"."value", "events_onSuccessEvents"."success_event_id", "events_onSuccessEvents"."fail_event_id", "events_onSuccessEvents"."always_event_id", "events_onSuccessEvents"."condition_event_id", "events_onSuccessEvents"."target_event_id", "events_onSuccessEvents"."tool_id", "events_onSuccessEvents"."message", "events_onSuccessEvents"."email_addresses", "events_onSuccessEvents"."email_subject", "events_onSuccessEvents"."created_at", "events_onSuccessEvents"."updated_at", "events_onSuccessEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onSuccessEvents" left join lateral (select json_build_array("events_onSuccessEvents_targetEvent"."id", "events_onSuccessEvents_targetEvent"."user_id", "events_onSuccessEvents_targetEvent"."name", "events_onSuccessEvents_targetEvent"."description", "events_onSuccessEvents_targetEvent"."shared", "events_onSuccessEvents_targetEvent"."type", "events_onSuccessEvents_targetEvent"."content", "events_onSuccessEvents_targetEvent"."http_method", "events_onSuccessEvents_targetEvent"."http_url", "events_onSuccessEvents_targetEvent"."http_headers", "events_onSuccessEvents_targetEvent"."http_body", "events_onSuccessEvents_targetEvent"."tool_action_config", "events_onSuccessEvents_targetEvent"."status", "events_onSuccessEvents_targetEvent"."trigger_type", "events_onSuccessEvents_targetEvent"."schedule_number", "events_onSuccessEvents_targetEvent"."schedule_unit", "events_onSuccessEvents_targetEvent"."custom_schedule", "events_onSuccessEvents_targetEvent"."run_location", "events_onSuccessEvents_targetEvent"."server_id", "events_onSuccessEvents_targetEvent"."timeout_value", "events_onSuccessEvents_targetEvent"."timeout_unit", "events_onSuccessEvents_targetEvent"."retries", "events_onSuccessEvents_targetEvent"."start_time", "events_onSuccessEvents_targetEvent"."execution_count", "events_onSuccessEvents_targetEvent"."max_executions", "events_onSuccessEvents_targetEvent"."reset_counter_on_active", "events_onSuccessEvents_targetEvent"."last_run_at", "events_onSuccessEvents_targetEvent"."next_run_at", "events_onSuccessEvents_targetEvent"."success_count", "events_onSuccessEvents_targetEvent"."failure_count", "events_onSuccessEvents_targetEvent"."tags", "events_onSuccessEvents_targetEvent"."created_at", "events_onSuccessEvents_targetEvent"."updated_at") as "data" from (select * from "events" "events_onSuccessEvents_targetEvent" where "events_onSuccessEvents_targetEvent"."id" = "events_onSuccessEvents"."target_event_id" limit $3) "events_onSuccessEvents_targetEvent") "events_onSuccessEvents_targetEvent" on true where "events_onSuccessEvents"."success_event_id" = "events"."id") "events_onSuccessEvents" on true left join lateral (select coalesce(json_agg(json_build_array("events_onFailEvents"."id", "events_onFailEvents"."type", "events_onFailEvents"."value", "events_onFailEvents"."success_event_id", "events_onFailEvents"."fail_event_id", "events_onFailEvents"."always_event_id", "events_onFailEvents"."condition_event_id", "events_onFailEvents"."target_event_id", "events_onFailEvents"."tool_id", "events_onFailEvents"."message", "events_onFailEvents"."email_addresses", "events_onFailEvents"."email_subject", "events_onFailEvents"."created_at", "events_onFailEvents"."updated_at", "events_onFailEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onFailEvents" left join lateral (select json_build_array("events_onFailEvents_targetEvent"."id", "events_onFailEvents_targetEvent"."user_id", "events_onFailEvents_targetEvent"."name", "events_onFailEvents_targetEvent"."description", "events_onFailEvents_targetEvent"."shared", "events_onFailEvents_targetEvent"."type", "events_onFailEvents_targetEvent"."content", "events_onFailEvents_targetEvent"."http_method", "events_onFailEvents_targetEvent"."http_url", "events_onFailEvents_targetEvent"."http_headers", "events_onFailEvents_targetEvent"."http_body", "events_onFailEvents_targetEvent"."tool_action_config", "events_onFailEvents_targetEvent"."status", "events_onFailEvents_targetEvent"."trigger_type", "events_onFailEvents_targetEvent"."schedule_number", "events_onFailEvents_targetEvent"."schedule_unit", "events_onFailEvents_targetEvent"."custom_schedule", "events_onFailEvents_targetEvent"."run_location", "events_onFailEvents_targetEvent"."server_id", "events_onFailEvents_targetEvent"."timeout_value", "events_onFailEvents_targetEvent"."timeout_unit", "events_onFailEvents_targetEvent"."retries", "events_onFailEvents_targetEvent"."start_time", "events_onFailEvents_targetEvent"."execution_count", "events_onFailEvents_targetEvent"."max_executions", "events_onFailEvents_targetEvent"."reset_counter_on_active", "events_onFailEvents_targetEvent"."last_run_at", "events_onFailEvents_targetEvent"."next_run_at", "events_onFailEvents_targetEvent"."success_count", "events_onFailEvents_targetEvent"."failure_count", "events_onFailEvents_targetEvent"."tags", "events_onFailEvents_targetEvent"."created_at", "events_onFailEvents_targetEvent"."updated_at") as "data" from (select * from "events" "events_onFailEvents_targetEvent" where "events_onFailEvents_targetEvent"."id" = "events_onFailEvents"."target_event_id" limit $4) "events_onFailEvents_targetEvent") "events_onFailEvents_targetEvent" on true where "events_onFailEvents"."fail_event_id" = "events"."id") "events_onFailEvents" on true left join lateral (select coalesce(json_agg(json_build_array("events_onAlwaysEvents"."id", "events_onAlwaysEvents"."type", "events_onAlwaysEvents"."value", "events_onAlwaysEvents"."success_event_id", "events_onAlwaysEvents"."fail_event_id", "events_onAlwaysEvents"."always_event_id", "events_onAlwaysEvents"."condition_event_id", "events_onAlwaysEvents"."target_event_id", "events_onAlwaysEvents"."tool_id", "events_onAlwaysEvents"."message", "events_onAlwaysEvents"."email_addresses", "events_onAlwaysEvents"."email_subject", "events_onAlwaysEvents"."created_at", "events_onAlwaysEvents"."updated_at", "events_onAlwaysEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onAlwaysEvents" left join lateral (select json_build_array("events_onAlwaysEvents_targetEvent"."id", "events_onAlwaysEvents_targetEvent"."user_id", "events_onAlwaysEvents_targetEvent"."name", "events_onAlwaysEvents_targetEvent"."description", "events_onAlwaysEvents_targetEvent"."shared", "events_onAlwaysEvents_targetEvent"."type", "events_onAlwaysEvents_targetEvent"."content", "events_onAlwaysEvents_targetEvent"."http_method", "events_onAlwaysEvents_targetEvent"."http_url", "events_onAlwaysEvents_targetEvent"."http_headers", "events_onAlwaysEvents_targetEvent"."http_body", "events_onAlwaysEvents_targetEvent"."tool_action_config", "events_onAlwaysEvents_targetEvent"."status", "events_onAlwaysEvents_targetEvent"."trigger_type", "events_onAlwaysEvents_targetEvent"."schedule_number", "events_onAlwaysEvents_targetEvent"."schedule_unit", "events_onAlwaysEvents_targetEvent"."custom_schedule", "events_onAlwaysEvents_targetEvent"."run_location", "events_onAlwaysEvents_targetEvent"."server_id", "events_onAlwaysEvents_targetEvent"."timeout_value", "events_onAlwaysEvents_targetEvent"."timeout_unit", "events_onAlwaysEvents_targetEvent"."retries", "events_onAlwaysEvents_targetEvent"."start_time", "events_onAlwaysEvents_targetEvent"."execution_count", "events_onAlwaysEvents_targetEvent"."max_executions", "events_onAlwaysEvents_targetEvent"."reset_counter_on_active", "events_onAlwaysEvents_targetEvent"."last_run_at", "events_onAlwaysEvents_targetEvent"."next_run_at", "events_onAlwaysEvents_targetEvent"."success_count", "events_onAlwaysEvents_targetEvent"."failure_count", "events_onAlwaysEvents_targetEvent"."tags", "events_onAlwaysEvents_targetEvent"."created_at", "events_onAlwaysEvents_targetEvent"."updated_at") as "data" from (select * from "events" "events_onAlwaysEvents_targetEvent" where "events_onAlwaysEvents_targetEvent"."id" = "events_onAlwaysEvents"."target_event_id" limit $5) "events_onAlwaysEvents_targetEvent") "events_onAlwaysEvents_targetEvent" on true where "events_onAlwaysEvents"."always_event_id" = "events"."id") "events_onAlwaysEvents" on true where "events"."id" = $6 limit $7
cronium-app-dev     | params: 1,1,1,1,1,550,1
cronium-app-dev     |     at async DatabaseStorage.getEventWithRelations (src/server/storage.ts:573:33)
cronium-app-dev     |     at async eval (src/lib/scheduler/scheduler.ts:408:37)
cronium-app-dev     |   571 |     try {
cronium-app-dev     |   572 |       // Use Drizzle's relational query to fetch everything in a single query
cronium-app-dev     | > 573 |       const eventWithRelations = await db.query.events.findFirst({
cronium-app-dev     |       |                                 ^
cronium-app-dev     |   574 |         where: eq(events.id, id),
cronium-app-dev     |   575 |         with: {
cronium-app-dev     |   576 |           envVars: true, {
cronium-app-dev     |   query: `select "events"."id", "events"."user_id", "events"."name", "events"."description", "events"."shared", "events"."type", "events"."content", "events"."http_method", "events"."http_url", "events"."http_headers", "events"."http_body", "events"."tool_action_config", "events"."status", "events"."trigger_type", "events"."schedule_number", "events"."schedule_unit", "events"."custom_schedule", "events"."run_location", "events"."server_id", "events"."timeout_value", "events"."timeout_unit", "events"."retries", "events"."start_time", "events"."execution_count", "events"."max_executions", "events"."reset_counter_on_active", "events"."last_run_at", "events"."next_run_at", "events"."success_count", "events"."failure_count", "events"."tags", "events"."created_at", "events"."updated_at", "events_envVars"."data" as "envVars", "events_server"."data" as "server", "events_eventServers"."data" as "eventServers", "events_onSuccessEvents"."data" as "onSuccessEvents", "events_onFailEvents"."data" as "onFailEvents", "events_onAlwaysEvents"."data" as "onAlwaysEvents" from "events" "events" left join lateral (select coalesce(json_agg(json_build_array("events_envVars"."id", "events_envVars"."event_id", "events_envVars"."key", "events_envVars"."value", "events_envVars"."created_at", "events_envVars"."updated_at")), '[]'::json) as "data" from "env_vars" "events_envVars" where "events_envVars"."event_id" = "events"."id") "events_envVars" on true left join lateral (select json_build_array("events_server"."id", "events_server"."user_id", "events_server"."name", "events_server"."address", "events_server"."ssh_key", "events_server"."username", "events_server"."port", "events_server"."shared", "events_server"."online", "events_server"."last_checked", "events_server"."created_at", "events_server"."updated_at") as "data" from (select * from "servers" "events_server" where "events_server"."id" = "events"."server_id" limit $1) "events_server") "events_server" on true left join lateral (select coalesce(json_agg(json_build_array("events_eventServers"."id", "events_eventServers"."event_id", "events_eventServers"."server_id", "events_eventServers"."created_at", "events_eventServers_server"."data")), '[]'::json) as "data" from "event_servers" "events_eventServers" left join lateral (select json_build_array("events_eventServers_server"."id", "events_eventServers_server"."user_id", "events_eventServers_server"."name", "events_eventServers_server"."address", "events_eventServers_server"."ssh_key", "events_eventServers_server"."username", "events_eventServers_server"."port", "events_eventServers_server"."shared", "events_eventServers_server"."online", "events_eventServers_server"."last_checked", "events_eventServers_server"."created_at", "events_eventServers_server"."updated_at") as "data" from (select * from "servers" "events_eventServers_server" where "events_eventServers_server"."id" = "events_eventServers"."server_id" limit $2) "events_eventServers_server") "events_eventServers_server" on true where "events_eventServers"."event_id" = "events"."id") "events_eventServers" on true left join lateral (select coalesce(json_agg(json_build_array("events_onSuccessEvents"."id", "events_onSuccessEvents"."type", "events_onSuccessEvents"."value", "events_onSuccessEvents"."success_event_id", "events_onSuccessEvents"."fail_event_id", "events_onSuccessEvents"."always_event_id", "events_onSuccessEvents"."condition_event_id", "events_onSuccessEvents"."target_event_id", "events_onSuccessEvents"."tool_id", "events_onSuccessEvents"."message", "events_onSuccessEvents"."email_addresses", "events_onSuccessEvents"."email_subject", "events_onSuccessEvents"."created_at", "events_onSuccessEvents"."updated_at", "events_onSuccessEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onSuccessEvents" left join lateral (select json_build_array("events_onSuccessEvents_targetEvent"."id", "events_onSuccessEvents_targetEvent"."user_id", "events_onSuccessEvents_targetEvent"."name", "events_onSuccessEvents_targetEvent"."description", "events_onSuccessEvents_targetEvent"."shared", "events_onSuccessEvents_targetEvent"."type", "events_onSuccessEvents_targetEvent"."content", "events_onSuccessEvents_targetEvent"."http_method", "events_onSuccessEvents_targetEvent"."http_url", "events_onSuccessEvents_targetEvent"."http_headers", "events_onSuccessEvents_targetEvent"."http_body", "events_onSuccessEvents_targetEvent"."tool_action_config", "events_onSuccessEvents_targetEvent"."status", "events_onSuccessEvents_targetEvent"."trigger_type", "events_onSuccessEvents_targetEvent"."schedule_number", "events_onSuccessEvents_targetEvent"."schedule_unit", "events_onSuccessEvents_targetEvent"."custom_schedule", "events_onSuccessEvents_targetEvent"."run_location", "events_onSuccessEvents_targetEvent"."server_id", "events_onSuccessEvents_targetEvent"."timeout_value", "events_onSuccessEvents_targetEvent"."timeout_unit", "events_onSuccessEvents_targetEvent"."retries", "events_onSuccessEvents_targetEvent"."start_time", "events_onSuccessEvents_targetEvent"."execution_count", "events_onSuccessEvents_targetEvent"."max_executions", "events_onSuccessEvents_targetEvent"."reset_counter_on_active", "events_onSuccessEvents_targetEvent"."last_run_at", "events_onSuccessEvents_targetEvent"."next_run_at", "events_onSuccessEvents_targetEvent"."success_count", "events_onSuccessEvents_targetEvent"."failure_count", "events_onSuccessEvents_targetEvent"."tags", "events_onSuccessEvents_targetEvent"."created_at", "events_onSuccessEvents_targetEvent"."updated_at") as "data" from (select * from "events" "events_onSuccessEvents_targetEvent" where "events_onSuccessEvents_targetEvent"."id" = "events_onSuccessEvents"."target_event_id" limit $3) "events_onSuccessEvents_targetEvent") "events_onSuccessEvents_targetEvent" on true where "events_onSuccessEvents"."success_event_id" = "events"."id") "events_onSuccessEvents" on true left join lateral (select coalesce(json_agg(json_build_array("events_onFailEvents"."id", "events_onFailEvents"."type", "events_onFailEvents"."value", "events_onFailEvents"."success_event_id", "events_onFailEvents"."fail_event_id", "events_onFailEvents"."always_event_id", "events_onFailEvents"."condition_event_id", "events_onFailEvents"."target_event_id", "events_onFailEvents"."tool_id", "events_onFailEvents"."message", "events_onFailEvents"."email_addresses", "events_onFailEvents"."email_subject", "events_onFailEvents"."created_at", "events_onFailEvents"."updated_at", "events_onFailEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onFailEvents" left join lateral (select json_build_array("events_onFailEvents_targetEvent"."id", "events_onFailEvents_targetEvent"."user_id", "events_onFailEvents_targetEvent"."name", "events_onFailEvents_targetEvent"."description", "events_onFailEvents_targetEvent"."shared", "events_onFailEvents_targetEvent"."type", "events_onFailEvents_targetEvent"."content", "events_onFailEvents_targetEvent"."http_method", "events_onFailEvents_targetEvent"."http_url", "events_onFailEvents_targetEvent"."http_headers", "events_onFailEvents_targetEvent"."http_body", "events_onFailEvents_targetEvent"."tool_action_config", "events_onFailEvents_targetEvent"."status", "events_onFailEvents_targetEvent"."trigger_type", "events_onFailEvents_targetEvent"."schedule_number", "events_onFailEvents_targetEvent"."schedule_unit", "events_onFailEvents_targetEvent"."custom_schedule", "events_onFailEvents_targetEvent"."run_location", "events_onFailEvents_targetEvent"."server_id", "events_onFailEvents_targetEvent"."timeout_value", "events_onFailEvents_targetEvent"."timeout_unit", "events_onFailEvents_targetEvent"."retries", "events_onFailEvents_targetEvent"."start_time", "events_onFailEvents_targetEvent"."execution_count", "events_onFailEvents_targetEvent"."max_executions", "events_onFailEvents_targetEvent"."reset_counter_on_active", "events_onFailEvents_targetEvent"."last_run_at", "events_onFailEvents_targetEvent"."next_run_at", "events_onFailEvents_targetEvent"."success_count", "events_onFailEvents_targetEvent"."failure_count", "events_onFailEvents_targetEvent"."tags", "events_onFailEvents_targetEvent"."created_at", "events_onFailEvents_targetEvent"."updated_at") as "data" from (select * from "events" "events_onFailEvents_targetEvent" where "events_onFailEvents_targetEvent"."id" = "events_onFailEvents"."target_event_id" limit $4) "events_onFailEvents_targetEvent") "events_onFailEvents_targetEvent" on true where "events_onFailEvents"."fail_event_id" = "events"."id") "events_onFailEvents" on true left join lateral (select coalesce(json_agg(json_build_array("events_onAlwaysEvents"."id", "events_onAlwaysEvents"."type", "events_onAlwaysEvents"."value", "events_onAlwaysEvents"."success_event_id", "events_onAlwaysEvents"."fail_event_id", "events_onAlwaysEvents"."always_event_id", "events_onAlwaysEvents"."condition_event_id", "events_onAlwaysEvents"."target_event_id", "events_onAlwaysEvents"."tool_id", "events_onAlwaysEvents"."message", "events_onAlwaysEvents"."email_addresses", "events_onAlwaysEvents"."email_subject", "events_onAlwaysEvents"."created_at", "events_onAlwaysEvents"."updated_at", "events_onAlwaysEvents_targetEvent"."data")), '[]'::json) as "data" from "conditional_actions" "events_onAlwaysEvents" left join lateral (select json_build_array("events_onAlwaysEvents_targetEvent"."id", "events_onAlwaysEvents_targetEvent"."user_id", "events_onAlwaysEvents_targetEvent"."name", "events_onAlwaysEvents_targetEvent"."description", "events_onAlwaysEvents_targetEvent"."shared", "events_onAlwaysEvents_targetEvent"."type", "events_onAlwaysEvents_targetEvent"."content", "events_onAlwaysEvents_targetEvent"."http_method", "events_onAlwaysEvents_targetEvent"."http_url", "events_onAlwaysEvents_targetEvent"."http_headers", "events_onAlwaysEvents_targetEvent"."http_body", "events_onAlwaysEvents_targetEvent"."tool_action_config", "events_onAlwaysEvents_targetEvent"."status", "even`... 1424 more characters,
cronium-app-dev     |   params: [Array],
cronium-app-dev     |   [cause]: Error: Connection terminated due to connection timeout
cronium-app-dev     |       at async DatabaseStorage.getEventWithRelations (src/server/storage.ts:573:33)
cronium-app-dev     |       at async eval (src/lib/scheduler/scheduler.ts:408:37)
cronium-app-dev     |     571 |     try {
cronium-app-dev     |     572 |       // Use Drizzle's relational query to fetch everything in a single query
cronium-app-dev     |   > 573 |       const eventWithRelations = await db.query.events.findFirst({
cronium-app-dev     |         |                                 ^
cronium-app-dev     |     574 |         where: eq(events.id, id),
cronium-app-dev     |     575 |         with: {
cronium-app-dev     |     576 |           envVars: true, {
cronium-app-dev     |     [cause]: [Error: Connection terminated unexpectedly]
cronium-app-dev     |   }
cronium-app-dev     | }