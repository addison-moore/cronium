# Development environment - for use with external Postgres, Grafana, and Prometheus
# Usage: pnpm dev:docker

services:
  # Valkey (Redis-compatible) for caching and queue
  valkey:
    image: valkey/valkey:7-alpine
    container_name: cronium-valkey-dev
    command: valkey-server --appendonly yes --maxmemory ${VALKEY_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru --loglevel verbose
    ports:
      - "${VALKEY_PORT:-6379}:6379"
    volumes:
      - valkey_dev_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cronium-dev-network

  # Orchestrator Service (cronium-agent)
  cronium-agent:
    build:
      context: ./orchestrator/cronium-orchestrator
      dockerfile: Dockerfile.dev
    container_name: cronium-agent-dev
    environment:
      # Configuration file path
      CONFIG_FILE: /app/config/cronium-orchestrator.yaml

      # API Configuration (CRONIUM_ prefix required)
      CRONIUM_API_ENDPOINT: http://cronium-app-dev:5001
      CRONIUM_API_TOKEN: ${INTERNAL_API_KEY}

      # Server Configuration
      CRONIUM_SERVER_ID: ${ORCHESTRATOR_ID:-dev-orchestrator-01}
      CRONIUM_SERVER_PORT: 8080
      CRONIUM_SERVER_METRICS_ENABLED: true
      CRONIUM_SERVER_METRICS_PORT: 9090

      # Jobs Configuration
      CRONIUM_JOBS_MAX_CONCURRENT: ${MAX_CONCURRENT_JOBS:-10}
      CRONIUM_JOBS_POLL_INTERVAL: ${JOB_POLL_INTERVAL:-5s}
      CRONIUM_JOBS_HEARTBEAT_INTERVAL: 30s
      CRONIUM_JOBS_TIMEOUT: 24h

      # Container Configuration
      CRONIUM_CONTAINER_DOCKER_ENDPOINT: unix:///var/run/docker.sock
      CRONIUM_CONTAINER_RUNTIME_JWT_SECRET: ${JWT_SECRET}
      CRONIUM_CONTAINER_RUNTIME_BACKEND_URL: http://cronium-app-dev:5001
      CRONIUM_CONTAINER_RUNTIME_VALKEY_URL: valkey://cronium-valkey-dev:6379

      # WebSocket Configuration
      CRONIUM_API_WS_ENDPOINT: ws://cronium-app-dev:5002/socket.io/

      # Logging
      CRONIUM_LOGGING_LEVEL: debug
      CRONIUM_LOGGING_FORMAT: text
      CRONIUM_LOGGING_WEBSOCKET_ENABLED: "false"

      # Direct environment variables (no prefix)
      DOCKER_HOST: unix:///var/run/docker.sock
      GO_ENV: development
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./orchestrator/cronium-orchestrator:/app
      - ./orchestrator/cronium-orchestrator/configs:/app/config:ro
      - orchestrator_dev_data:/app/data
    command: air -c .air.toml
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cronium-dev-network
    security_opt:
      - no-new-privileges:true

  # Main Cronium Application
  cronium-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cronium-app-dev
    ports:
      - "${APP_PORT:-5001}:5001"
      - "${SOCKET_PORT:-5002}:5002"
    environment:
      # Database - Using external Postgres
      DATABASE_URL: ${DATABASE_URL}

      # Auth
      AUTH_URL: ${AUTH_URL:-http://localhost:5001}
      AUTH_SECRET: ${AUTH_SECRET}

      # Encryption
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Services
      ORCHESTRATOR_URL: http://cronium-agent-dev:8080
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JWT_SECRET: ${JWT_SECRET}

      # WebSocket
      SOCKET_PORT: 5002
      NEXT_PUBLIC_SOCKET_PORT: ${SOCKET_PORT:-5002}
      NEXT_PUBLIC_SOCKET_URL: ${SOCKET_URL:-http://localhost:5002}

      # Valkey
      VALKEY_URL: redis://cronium-valkey-dev:6379

      # App Configuration
      NODE_ENV: development
      LOG_LEVEL: debug
      NEXT_TELEMETRY_DISABLED: 1

      # Email (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}

      # AI (optional)
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # External monitoring (optional)
      PROMETHEUS_URL: ${PROMETHEUS_URL}
      GRAFANA_URL: ${GRAFANA_URL}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "pnpm install && pnpm dev & pnpm dev:socket"
    depends_on:
      valkey:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5001', (res) => process.exit(res.statusCode < 400 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cronium-dev-network

volumes:
  valkey_dev_data:
    driver: local
  orchestrator_dev_data:
    driver: local

networks:
  cronium-dev-network:
    driver: bridge
