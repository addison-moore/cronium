import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { generateScriptCode } from "@/lib/ai";
import { storage } from "@/server/storage";
import { z } from "zod";

// Schema for validating generate script input
const generateScriptSchema = z.object({
  prompt: z.string().min(1, "Prompt is required"),
  scriptType: z.string(),
  currentCode: z.string().optional(),
});

export async function POST(req: NextRequest) {
  try {
    // Check if user is authenticated
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }

    // Check if AI is enabled
    const aiEnabledSetting = await storage.getSetting("aiEnabled");
    if (aiEnabledSetting?.value !== "true") {
      return NextResponse.json(
        { message: "AI script generation is not enabled" },
        { status: 403 },
      );
    }

    // Parse and validate request data
    const requestData = await req.json();
    const validationResult = generateScriptSchema.safeParse(requestData);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          message: "Invalid request data",
          errors: validationResult.error.format(),
        },
        { status: 400 },
      );
    }

    const { prompt, scriptType, currentCode } = validationResult.data;

    // Check if OpenAI API key is available
    const apiKeySetting = await storage.getSetting("openaiApiKey");
    if (!apiKeySetting?.value) {
      return NextResponse.json(
        { message: "OpenAI API key not configured" },
        { status: 503 },
      );
    }

    // Generate code with OpenAI
    const generatedCode = await generateScriptCode(
      prompt,
      scriptType,
      currentCode,
    );

    // Log the AI generation for audit purposes
    console.log(
      `AI script generated by user ${session.user.id} for script type ${scriptType}`,
    );

    return NextResponse.json({ code: generatedCode });
  } catch (error: any) {
    console.error("Error generating script with AI:", error);
    return NextResponse.json(
      { message: "Failed to generate script", error: error.message },
      { status: 500 },
    );
  }
}
