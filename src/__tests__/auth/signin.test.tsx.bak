"use client";

import { render, screen, fireEvent, waitFor, act } from "@testing-library/react";
import SignIn from "@/app/[lang]/auth/signin/page";
import { LanguageProvider } from "@/components/providers/language-provider";
import { NextIntlClientProvider } from "next-intl";
import messages from "@/messages/en.json";

// Mock the next/navigation module
jest.mock("next/navigation", () => ({
  useRouter: () => ({
    push: jest.fn(),
    refresh: jest.fn(),
  }),
  useSearchParams: () => ({
    get: (param: string) => {
      if (param === "error") return "CredentialsSignin";
      return null;
    },
  }),
}));

// Mock the useLanguage hook
jest.mock("@/components/providers/language-provider", () => ({
  useLanguage: () => ({
    locale: "en",
    t: (key: string) => key, // Simple identity function for translations
  }),
}));

// Mock next-auth
jest.mock("next-auth/react", () => ({
  signIn: jest.fn(),
}));

const renderComponent = () => {
  return render(
    <LanguageProvider>
      <NextIntlClientProvider locale="en" messages={messages}>
        <SignIn />
      </NextIntlClientProvider>
    </LanguageProvider>
  );
};

describe("SignIn", () => {
  // Restore original fetch after each test
  afterEach(() => {
    jest.restoreAllMocks();
  });

  it("renders the form correctly", () => {
    renderComponent();

    expect(screen.getByLabelText("Auth.UsernameOrEmail")).toBeInTheDocument();
    expect(screen.getByLabelText("Auth.Password")).toBeInTheDocument();
    expect(
      screen.getByRole("button", { name: "Auth.SignIn" })
    ).toBeInTheDocument();
  });

  it("shows validation errors for empty fields on submit", async () => {
    renderComponent();

    await act(async () => {
      fireEvent.click(screen.getByRole("button", { name: "Auth.SignIn" }));
    });

    await waitFor(async () => {
      expect(await screen.findByText("Username or email is required")).toBeInTheDocument();
      expect(await screen.findByText("Password is required")).toBeInTheDocument();
    });
  });

  it("shows server error from URL params", async () => {
    renderComponent();

    await waitFor(async () => {
      expect(await screen.findByText("Auth.InvalidCredentials")).toBeInTheDocument();
    });
  });

  it("submits the form with valid credentials", async () => {
    const mockSignIn = require("next-auth/react").signIn;
    mockSignIn.mockResolvedValue({ ok: true });

    global.fetch = jest.fn(() =>
      Promise.resolve({
        json: () => Promise.resolve({ success: true }),
      })
    ) as jest.Mock;

    const mockRouterPush = require("next/navigation").useRouter().push;

    renderComponent();

    await act(async () => {
      fireEvent.change(screen.getByLabelText("Auth.UsernameOrEmail"), {
        target: { value: "testuser" },
      });
      fireEvent.change(screen.getByLabelText("Auth.Password"), {
        target: { value: "password123" },
      });

      fireEvent.click(screen.getByRole("button", { name: "Auth.SignIn" }));
    });

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith(
        '/api/auth/passport/login',
        expect.objectContaining({
          method: 'POST',
          body: JSON.stringify({ username: 'testuser', password: 'password123' }),
        })
      );
      expect(mockSignIn).toHaveBeenCalledWith(
        "credentials",
        expect.objectContaining({
          redirect: false,
          username: "testuser",
          password: "password123",
        })
      );
      expect(mockRouterPush).toHaveBeenCalledWith("/en/dashboard");
    });
  });
});