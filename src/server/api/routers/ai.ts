import { z } from "zod";
import { createTRPCRouter, protectedProcedure } from "../trpc";
import { TRPCError } from "@trpc/server";
import { storage } from "@/server/storage";
import { generateScriptCode } from "@/lib/ai";

// Schemas
const generateScriptSchema = z.object({
  prompt: z.string().min(1, "Prompt is required"),
  scriptType: z.string(),
  currentCode: z.string().optional(),
});

export const aiRouter = createTRPCRouter({
  // Generate script code using AI
  generateScript: protectedProcedure
    .input(generateScriptSchema)
    .mutation(async ({ ctx, input }) => {
      try {
        // Check if AI is enabled
        const aiEnabledSetting = await storage.getSetting("aiEnabled");
        if (aiEnabledSetting?.value !== "true") {
          throw new TRPCError({
            code: "FORBIDDEN",
            message: "AI script generation is not enabled",
          });
        }

        // Check if OpenAI API key is available
        const apiKeySetting = await storage.getSetting("openaiApiKey");
        if (!apiKeySetting?.value) {
          throw new TRPCError({
            code: "PRECONDITION_FAILED",
            message: "OpenAI API key not configured",
          });
        }

        // Generate code with OpenAI
        const generatedCode = await generateScriptCode(
          input.prompt,
          input.scriptType,
          input.currentCode,
        );

        // Log the AI generation for audit purposes
        console.log(
          `AI script generated by user ${ctx.session.user.id} for script type ${input.scriptType}`,
        );

        return { code: generatedCode };
      } catch (error) {
        if (error instanceof TRPCError) {
          throw error;
        }

        // Handle AI generation errors
        const errorMessage =
          error instanceof Error ? error.message : String(error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Failed to generate script",
          cause: error instanceof Error ? error : new Error(errorMessage),
        });
      }
    }),
});
