import { z } from "zod";
import {
  createTRPCRouter,
  protectedProcedure,
  withTiming,
  withRateLimit,
} from "../trpc";
import { TRPCError } from "@trpc/server";
import { withErrorHandling } from "@/server/utils/error-utils";
import { mutationResponse } from "@/server/utils/api-patterns";
import { storage } from "@/server/storage";
import { generateScriptCode } from "@/lib/ai";

// Schemas
const generateScriptSchema = z.object({
  prompt: z.string().min(1, "Prompt is required"),
  scriptType: z.string(),
  currentCode: z.string().optional(),
});

export const aiRouter = createTRPCRouter({
  // Generate script code using AI
  generateScript: protectedProcedure
    .use(withTiming)
    .use(withRateLimit(10, 60000)) // 10 AI generations per minute per user
    .input(generateScriptSchema)
    .mutation(async ({ ctx, input }) => {
      return withErrorHandling(
        async () => {
          // Check if AI is enabled
          const aiEnabledSetting = await storage.getSetting("aiEnabled");
          if (aiEnabledSetting?.value !== "true") {
            throw new TRPCError({
              code: "FORBIDDEN",
              message: "AI script generation is not enabled",
            });
          }

          // Check if OpenAI API key is available
          const apiKeySetting = await storage.getSetting("openaiApiKey");
          if (!apiKeySetting?.value) {
            throw new TRPCError({
              code: "PRECONDITION_FAILED",
              message: "OpenAI API key not configured",
            });
          }

          // Generate code with OpenAI
          const generatedCode = await generateScriptCode(
            input.prompt,
            input.scriptType,
            input.currentCode,
          );

          // Log the AI generation for audit purposes
          console.log(
            `AI script generated by user ${ctx.session.user.id} for script type ${input.scriptType}`,
          );

          return mutationResponse(
            { code: generatedCode },
            "Script generated successfully",
          );
        },
        {
          component: "aiRouter",
          operationName: "generateScript",
          userId: ctx.session.user.id,
        },
      );
    }),
});
