name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag"
        required: false
        default: "latest"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_APP: ${{ github.repository }}-app
  IMAGE_NAME_ORCHESTRATOR: ${{ github.repository }}-orchestrator

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For signing images with cosign

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install cosign for signing images
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      # Generate metadata for images
      - name: Extract metadata for Cronium App
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Extract metadata for Orchestrator
        id: meta-orchestrator
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORCHESTRATOR }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      # Build and push Cronium App
      - name: Build and push Cronium App
        id: build-app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/cronium-app/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      # Build and push Orchestrator
      - name: Build and push Orchestrator
        id: build-orchestrator
        uses: docker/build-push-action@v5
        with:
          context: ./apps/orchestrator
          file: ./apps/orchestrator/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-orchestrator.outputs.tags }}
          labels: ${{ steps.meta-orchestrator.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      # Sign images with cosign
      - name: Sign Cronium App image
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-app.outputs.digest }}
        run: |
          echo "Signing image with digest: $DIGEST"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}@${{ steps.build-app.outputs.digest }}

      - name: Sign Orchestrator image
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-orchestrator.outputs.digest }}
        run: |
          echo "Signing image with digest: $DIGEST"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORCHESTRATOR }}@${{ steps.build-orchestrator.outputs.digest }}

      # Scan images for vulnerabilities (only if push was successful)
      - name: Run Trivy vulnerability scanner on Cronium App
        if: github.event_name != 'pull_request' && steps.build-app.outputs.digest != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}@${{ steps.build-app.outputs.digest }}
          format: "sarif"
          output: "trivy-app.sarif"
        continue-on-error: true

      - name: Run Trivy vulnerability scanner on Orchestrator
        if: github.event_name != 'pull_request' && steps.build-orchestrator.outputs.digest != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORCHESTRATOR }}@${{ steps.build-orchestrator.outputs.digest }}
          format: "sarif"
          output: "trivy-orchestrator.sarif"
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: "trivy-*.sarif"
          wait-for-processing: false
        continue-on-error: true

      # Output image information
      - name: Image details
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Images Published ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cronium App" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${{ env.IMAGE_NAME_APP }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: \`${{ steps.meta-app.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: \`${{ steps.build-app.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${{ env.IMAGE_NAME_ORCHESTRATOR }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: \`${{ steps.meta-orchestrator.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: \`${{ steps.build-orchestrator.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
