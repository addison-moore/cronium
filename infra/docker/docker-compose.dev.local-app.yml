# Development environment for running only Valkey and cronium-agent in Docker
# while running the Cronium Next.js app locally
# Usage: ./scripts/dev-docker-local-app.sh up

services:
  # Valkey (Redis-compatible) for caching and queue
  valkey:
    image: valkey/valkey:7-alpine
    container_name: cronium-valkey-dev
    command: valkey-server --appendonly yes --maxmemory ${VALKEY_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru --loglevel verbose
    ports:
      - "${VALKEY_PORT:-6379}:6379"
    volumes:
      - ../../data/valkey:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cronium-dev-network

  # Orchestrator Service (cronium-agent)
  cronium-agent:
    build:
      context: ../../apps/orchestrator
      dockerfile: Dockerfile.dev
    container_name: cronium-agent-dev
    environment:
      # Configuration file path
      CONFIG_FILE: /app/config/cronium-orchestrator.yaml

      # API Configuration (CRONIUM_ prefix required)
      # Point to host machine where Next.js app is running
      CRONIUM_API_ENDPOINT: http://host.docker.internal:5001
      CRONIUM_API_TOKEN: ${INTERNAL_API_KEY}

      # Server Configuration
      CRONIUM_SERVER_ID: ${ORCHESTRATOR_ID:-dev-orchestrator-01}
      CRONIUM_SERVER_PORT: 8080
      CRONIUM_SERVER_METRICS_ENABLED: true
      CRONIUM_SERVER_METRICS_PORT: 9090

      # Jobs Configuration
      CRONIUM_JOBS_MAX_CONCURRENT: ${MAX_CONCURRENT_JOBS:-10}
      CRONIUM_JOBS_POLL_INTERVAL: ${JOB_POLL_INTERVAL:-5s}
      CRONIUM_JOBS_HEARTBEAT_INTERVAL: 30s
      CRONIUM_JOBS_TIMEOUT: 24h

      # Container Configuration
      CRONIUM_CONTAINER_DOCKER_ENDPOINT: unix:///var/run/docker.sock
      CRONIUM_CONTAINER_RUNTIME_JWT_SECRET: ${JWT_SECRET}
      CRONIUM_CONTAINER_RUNTIME_BACKEND_URL: http://host.docker.internal:5001
      CRONIUM_CONTAINER_RUNTIME_VALKEY_URL: valkey://cronium-valkey-dev:6379

      # WebSocket Configuration
      CRONIUM_API_WS_ENDPOINT: ws://host.docker.internal:5002/socket.io/

      # Logging
      CRONIUM_LOGGING_LEVEL: debug
      CRONIUM_LOGGING_FORMAT: text
      CRONIUM_LOGGING_WEBSOCKET_ENABLED: "false"

      # Direct environment variables (no prefix)
      DOCKER_HOST: unix:///var/run/docker.sock
      GO_ENV: development
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../../apps/orchestrator:/app
      - ../../apps/orchestrator/configs:/app/config:ro
      - ../../data/orchestrator:/app/data
    command: air -c .air.toml
    ports:
      - "${ORCHESTRATOR_PORT:-8080}:8080"
      - "${ORCHESTRATOR_METRICS_PORT:-9090}:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cronium-dev-network
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  cronium-dev-network:
    driver: bridge
